// <auto-generated />
namespace Microsoft.Data.Entity.Migrations
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.Data.Entity.Migrations.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string ArgumentIsEmpty
        {
            get { return GetString("ArgumentIsEmpty"); }
        }

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string FormatArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string InvalidEnumValue
        {
            get { return GetString("InvalidEnumValue"); }
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string FormatInvalidEnumValue(object argumentName, object enumType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEnumValue", "argumentName", "enumType"), argumentName, enumType);
        }

        /// <summary>
        /// The current migration SQL generator '{sqlGeneratorType}' is unable to generate SQL for operations of type '{operationType}'.
        /// </summary>
        internal static string UnknownOperation
        {
            get { return GetString("UnknownOperation"); }
        }

        /// <summary>
        /// The current migration SQL generator '{sqlGeneratorType}' is unable to generate SQL for operations of type '{operationType}'.
        /// </summary>
        internal static string FormatUnknownOperation(object sqlGeneratorType, object operationType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnknownOperation", "sqlGeneratorType", "operationType"), sqlGeneratorType, operationType);
        }

        /// <summary>
        /// The target migration '{targetMigrationName}' was not found.
        /// </summary>
        internal static string TargetMigrationNotFound
        {
            get { return GetString("TargetMigrationNotFound"); }
        }

        /// <summary>
        /// The target migration '{targetMigrationName}' was not found.
        /// </summary>
        internal static string FormatTargetMigrationNotFound(object targetMigrationName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TargetMigrationNotFound", "targetMigrationName"), targetMigrationName);
        }

        /// <summary>
        /// The name '{migrationName}' is used by an existing migration.
        /// </summary>
        internal static string DuplicateMigrationName
        {
            get { return GetString("DuplicateMigrationName"); }
        }

        /// <summary>
        /// The name '{migrationName}' is used by an existing migration.
        /// </summary>
        internal static string FormatDuplicateMigrationName(object migrationName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateMigrationName", "migrationName"), migrationName);
        }

        /// <summary>
        /// The local and the database migrations are not consistent.
        /// </summary>
        internal static string InconsistentMigrations
        {
            get { return GetString("InconsistentMigrations"); }
        }

        /// <summary>
        /// The local and the database migrations are not consistent.
        /// </summary>
        internal static string FormatInconsistentMigrations()
        {
            return GetString("InconsistentMigrations");
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);
    
            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
